%YAML 1.1
---
# just like code_policy.yml, only using a different check
name: 'SyntaxCheck'
on: ['pull_request']
#on: ['push', 'pull_request']
jobs:
    SyntaxCheck:
        runs-on: 'ubuntu-latest'
        env:
            PERL5LIB: local/lib/perl5
        steps:
            - id: files
              uses: jitterbit/get-changed-files@v1

            - name: 'install dependencies'
              run: sudo apt install -y libcode-tidyall-perl libxml2-utils libxml-libxslt-perl cpanminus

            - name: 'checkout otobo'
              uses: actions/checkout@v2

            # some diagnostics
            - name: diagnostics
              run: |
                perl -v
                printenv | sort

            # Use caching for not needing to reinstall modules from CPAN for every check.
            # Packages are reinstalled when cpanfile.docker changes or when
            # cache key is manually changed.
            # Set current date for forcing a rebuild. In this case, make sure that
            # code_policy.yml and syntax_check.yml are kept in sync.
            # The rules where the cache is visible are not obvious.
            # See https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
            - name: 'check cache for CPAN modules'
              uses: actions/cache@v2
              id: local_lib
              with:
                path: local
                key: ${{ runner.os }}-${{ hashFiles('cpanfile.docker') }}-local_lib-20210923j

            - name: 'install from cpanfile.docker'
              if: steps.local_lib.outputs.cache-hit != 'true'
              run: |
                cpanm -l local --quiet --notest --installdeps --cpanfile cpanfile.docker . || sh -xc 'cat ~/.cpanm/work/*/build.log'

            # the setup is just like otobo.web.dockerfile and .dockerignore
            - name: set up Kernel/Config.pm
              run: 'cp --no-clobber Kernel/Config.pm.docker.dist Kernel/Config.pm'
            - name: fix Kernel/Config/Defaults.pm
              run: "perl -pi -e 's/^use lib /# disabled by syntax_check.yml: use lib/' Kernel/Config/Defaults.pm"

            # The actual test step.
            # :: tells prove that whatever follows should be passed to the test script
            - name: prove
              run: 'prove -I . -I Kernel/cpan-lib -I Custom --verbose scripts/test/Compile.t :: ${{ steps.files.outputs.added_modified }}'
